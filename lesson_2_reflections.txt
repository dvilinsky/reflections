When I initialized I reposity using git init on my existing directory, git created a .git file which, among other things, allows 
me to use all of the git tools on it, as well as allows git to track the changes in the revision history. It has to be done to 
start using git on that directory, in much the same way that the firefox icon needs to be clicken on before I can use firefox

The staging area is different from the working directory because, well, the working directory contains all your files, whereas
the staging area contains <= all the files you have. The repository, on the other hand, is all the stuff you have

We can use the staging area to make sure we have one commit per logical change because it allows us to only commit some files
to the repository, instead of all of them in one fell swoop

Branches are helpful when you want to manage multiple versions of your project at once. Maybe you're adding new features, maybe
you're translating shit, but the point is you can change one version without changing others. This frees you from having to clone 
your whole directory and make maybe ProjectV1, ProjectV2, etc folders.

Much like drawing pictures of binary trees or linked lists help us when we're trying to visualize operations performed on those 
data structures, drawing diagrams of branches helps us visualize where we are, what commits are reachable from where, and the 
overall code structure

Merge two brances A and B combines the changes you made in B into branch A, if branch B branced off of branch A. We represent it
how we do in the diagram because that's literally drawing branches. 

I'm not sure what the difference between automatic and manual merging is in the first place. Like, the command is still git merge
but we might have to change a few things in the file we're merging manually. 